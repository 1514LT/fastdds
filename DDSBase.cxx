// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DDSBase.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DDSBase.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




DDSBase::DDSBase()
{
}

DDSBase::~DDSBase()
{
}

DDSBase::DDSBase(
        const DDSBase& x)
{
    m_str_json = x.m_str_json;
}

DDSBase::DDSBase(
        DDSBase&& x) noexcept
{
    m_str_json = std::move(x.m_str_json);
}

DDSBase& DDSBase::operator =(
        const DDSBase& x)
{

    m_str_json = x.m_str_json;
    return *this;
}

DDSBase& DDSBase::operator =(
        DDSBase&& x) noexcept
{

    m_str_json = std::move(x.m_str_json);
    return *this;
}

bool DDSBase::operator ==(
        const DDSBase& x) const
{
    return (m_str_json == x.m_str_json);
}

bool DDSBase::operator !=(
        const DDSBase& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member str_json
 * @param _str_json New value to be copied in member str_json
 */
void DDSBase::str_json(
        const std::string& _str_json)
{
    m_str_json = _str_json;
}

/*!
 * @brief This function moves the value in member str_json
 * @param _str_json New value to be moved in member str_json
 */
void DDSBase::str_json(
        std::string&& _str_json)
{
    m_str_json = std::move(_str_json);
}

/*!
 * @brief This function returns a constant reference to member str_json
 * @return Constant reference to member str_json
 */
const std::string& DDSBase::str_json() const
{
    return m_str_json;
}

/*!
 * @brief This function returns a reference to member str_json
 * @return Reference to member str_json
 */
std::string& DDSBase::str_json()
{
    return m_str_json;
}

void DDSBase::setJson(Json::Value root)
{
  m_root = root;
}
Json::Value DDSBase::getJson()
{
  return m_root;
}

void DDSBase::setStrJson(Json::Value root)
{
  try
  {
    std::string tmp = JRLC::JsonToString(root);
    m_str_json = tmp;
  }
  catch(const std::exception& e)
  {
    std::cerr << e.what() << '\n';
  }
  
}
std::string DDSBase::getStrJson()
{
  return m_str_json;
}

sqlite3* DDSBase::getDB(std::string name)
{
  bool falg = false;
  for(auto db:m_DBMap)
  {
    if(db.first == name)
    {
      falg = true;
    }
  }
  if(falg)
    return m_DBMap[name];
  return nullptr;
}

void DDSBase::setDB(std::string name)
{
  sqlite3* DB;
  int exit = 0;
  exit = sqlite3_open(name.c_str(), &DB);
  if (exit) 
  {
    std::cerr << "Cannot open database: " << sqlite3_errmsg(DB);
  }
  else
  {
    std::cout << "Opened database successfully" << std::endl;
    m_DBMap[name] = DB;
  }
}

int DDSBase::sqliteExec(std::string nameDB,std::string cmd)
{
  int exit = 0;
  char* messageError;
  sqlite3* DB = getDB(nameDB);
  exit = sqlite3_exec(DB, cmd.c_str(), NULL, 0, &messageError);
  if (exit != SQLITE_OK)
  {
    std::cerr << "Error Create Table" << std::endl;
    sqlite3_free(messageError);
  }
  else
  {
    std::cout << "Table created Successfully" << std::endl; 
  }
  return exit;  
}
// Include auxiliary functions like for serializing/deserializing.
#include "DDSBaseCdrAux.ipp"

